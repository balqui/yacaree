This branch, june 2011:

choose_iface added:

* everyone imports iface from here instead of from iface,
  so that by just swapping which iface is imported here we
  change everyone to work on GUI or on textual reporting
* sort of a mixin, maybe there is a more elegant way of doing this
* for now, keep using yacaree_text_interface.py

ClMiner refactored:

* closures of singletons computed upon initialization
* flexible heap class created, allows comfortable min/max choice,
  expects to be used through inheritance and overriding of the
  methods pr (how to compute the priority of an elem) and elem_size
* yacaree-specific flexible heap created, overrides as we need and
  adds the halving operation under the name "test_size"
* remove the "safety support" argument, it should be possible to
  impose one by just modifying statics.genabsupp

Lattice refactored:

* rename candClosures to candidate_closures
  (but to make it easier to compare both headers available)
* remove the "safety support" argument
* compute Hasse edges via iPred instead of border
  (therefore Border class no longer used, and instead we keep
  the dict union_cover to play the role of the LC table in 
  the BT paper) - iPred seems to spare 1 to 2 seconds per minute
* as of today (jun 26) I have latticeB as the new one and
  ruleminerB using it, must remove the candClosures header
  at some point (after the testing)


