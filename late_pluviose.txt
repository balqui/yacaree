
Back to the Troppus algorithm and related things:

- take the Python implementation in the SVN and insert it 
into the next round of yacaree (folder below).

Need to "close" arbitrary sets as we are no longer considering
each time an existing closure plus an item (which the yacaree
clminer could use to compute an intersection of support sets).

Then, decide that the ItSet part of the Lattice dict is to be
the ClMiner instead.

Must not forget to revise again:

- the algorithm proper and the little detail about what gets into the heap
- the validating theorems
- the theoretical discussion comparing with Boros y etc
- the C implementation

In ~/Cloud Storage/svn_cs/balqui/ongoing_papers/clos_order/trunk/sw/python
there are a bunch of files implementing Troppus along a line comparable
with the early yacaree closure miner, but one may need quite some work
to align it with the modern one.

Files:
- Boros_et_al.py, implementation of the algorithm left implicit in that
paper, unnecessary for the time being.
- comparison.py: compares Troppus with early yacaree, I don't remember why
we had to do it so complicated.
- dataset.py: reads the data as per the early yacaree approach.
- flheap.py: heap as per the early yacaree approach.
- itset.py: just inherits from frozenset and adds a __str__.
- statics.py: as per the early yacaree.
- suppcounter: inherits fom dataset and handles many counts and extra info.
- troppus02.py: should be the new algorithm.
- troppus02timing.py: interation with profiler.
- flheap.py: heap as per the early yacaree approach.
- yclminer.py: algorithm in the early yacaree approach.

Try to make do with only troppus02.py, see if I need to pick up any
other file along later on.
